(cl:in-package #:clcl-tests)
(in-suite* unification)

(defvar *env*)

(defmacro with-ocl-env (&body body)
  `(let ((*env* (ocl-env (fset:empty-map)
                         (fset:empty-map))))
     ,@body))

(defun unify (place expr)
  (unify-types place expr (unified '() '() '() *env*)))

(defun print-id (x)
  (write x :pretty nil)
  (terpri)
  x)

(defun unify-success (place expr)
  (fresh-line)
  (write 'unifying-and-expecting-success)
  (terpri)
  (write place)
  (terpri)
  (write expr)
  (terpri)
  (is (typep (print-id (unify place expr)) 'unified)))

(defun unify-failure (place expr)
  (fresh-line)
  (write 'unifying-and-expecting-failure)
  (terpri)
  (write place)
  (terpri)
  (write expr)
  (terpri)
  (is (typep (print-id (unify place expr)) 'unify-error)))

(defun unify-loop (place expr)
  (fresh-line)
  (write 'unifying-and-expecting-occurs-check)
  (terpri)
  (write place)
  (terpri)
  (write expr)
  (terpri)
  (is (typep (print-id (unify place expr)) 'occurs-check)))

(test simple
  (with-ocl-env
   (unify-success (variable-type 'foo) (dimension 42 'array-rank))
   (unify-success (variable-type 'foo) (variable-type 'foo))
   (unify-failure (dimension 42 'array-rank) (variable-type 'foo))
   (let* ((foo (function-type '()
                              #1=(list (variable-type 'foo)
                                       (variable-type 'bar))
                              #1#
                              (list 'foo 0)))
          (bar (function-type '()
                              (list (variable-type 'xenu))
                              (list foo)
                              (list 'bar 0))))
     (unify-failure foo bar)
     (unify-failure bar foo)
     (unify-success bar bar))
   (let* ((foo (function-type '()
                              (list (variable-type 'foo))
                              (list (function-type '()
                                                   (list (variable-type 'foo))
                                                   (list (variable-type 'xenu))
                                                   'h))
                              'f))
          (bar (function-type '()
                              (list (variable-type 'bar))
                              (list foo)
                              'g)))
     (unify-success foo bar)
     (unify-failure bar foo))))

(test cycles
  (with-ocl-env
    (let* ((bar (function-type '() '() '() 'cyclic)))
      (reinitialize-instance bar :member-types (list bar) :member-names (list (variable-type 'cycles-r-us)))
      (unify-loop bar bar))))

(run!)
